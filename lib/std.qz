external func println<A>(x: A);

external func mod(x: int, y: int): int;

external func add_int(x: int, y: int): int;

interface Add {
  func _add_(self, other: self): self;
}

derive Add for int {
  func _add_(self, other: self): self {
    add_int(self, other)
  }
}

external func subtract_int(x: int, y: int): int;

interface Subtract {
  func _subtract_(self, other: self): self;
}

derive Subtract for int {
  func _subtract_(self, other: self): self {
    subtract_int(self, other)
  }
}

external func mult_int(x: int, y: int): int;

interface Mult {
  func _mult_(self, other: self): self;
}

derive Mult for int {
  func _mult_(self, other: self): self {
    mult_int(self, other)
  }
}

external func div_int(x: int, y: int): int;

interface Div {
  func _div_(self, other: self): self;
}

derive Div for int {
  func _div_(self, other: self): self {
    div_int(self, other)
  }
}

external func leq_int(x: int, y: int): bool;

external func geq_int(x: int, y: int): bool;

external func lt_int(x: int, y: int): bool;

external func gt_int(x: int, y: int): bool;

interface Order {
  func _leq_(self, other: self): bool;
  func _geq_(self, other: self): bool;
  func _lt_(self, other: self): bool;
  func _gt_(self, other: self): bool;
}

derive Order for int {
  func _leq_(self, other: self): bool {
    leq_int(self, other)
  }
  
  func _geq_(self, other: self): bool {
    geq_int(self, other)
  }
  
  func _lt_(self, other: self): bool {
    lt_int(self, other)
  }
  
  func _gt_(self, other: self): bool {
    gt_int(self, other)
  }
}

external func range(start: int, end: int): array<int>;

external func length_array<T>(arr: array<T>): int;

external func grow_array<T>(arr: array<T>, len: int): array<T>;

record vector<T> {
  arr: array<T>,
  len: int,
}

derive vector<T>  {
  func new(): self {
    vector {arr: [0,0,0,0,0], len: 0}
  }
  
  func push(self, v: T) {
    if {
      (length_array(self.arr) == self.len) => {
        self.arr = grow_array(self.arr, length_array(self.arr) * 2);
      },
      true => {
        1;
      },
    }
    self.arr[self.len] = v;
    self.len = self.len + 1;
  }
  
  func get(self, i: int): T {
    self.arr[i]
  }
  
  func put(self, i: int, v: T) {
    self.arr[i] = v;
  }
  
  func length(self): int {
    self.len
  }

  func capacity(self): int {
    length_array(self.arr)
  }
}
