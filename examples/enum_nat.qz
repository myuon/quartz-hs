external func println<A>(s: A);

enum Nat {
  Zero,
  Succ(Nat),
}

func zero(): Nat {
  Nat::Zero
}

func one(): Nat {
  Nat::Succ(Nat::Zero)
}

func two(): Nat {
  Nat::Succ(Nat::Succ(Nat::Zero))
}

interface Numeric {
  func is_zero(self): bool;
  func pred(self): self;
  func add(self, other: self): self;
}

derive Numeric for Nat {
  func is_zero(self): bool {
    match self {
      Nat::Zero => true,
      Nat::Succ(_) => false,
    }
  }
  
  func pred(self): self {
    match self {
      Nat::Succ(m) => m,
      _ => Nat::Zero,
    }
  }
  
  func add(self, other: self): self {
    match self {
      Nat::Zero => other,
      Nat::Succ(n) => Nat::Succ(n.add(other)),
    }
  }
}

func main() {
  println(two().is_zero());
  println(two().pred());
  println(two().add(one()));
}
